"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return initialiseOperation;
    }
});
var _path = require("../utilities/path");
var _metrics = require("../utilities/metrics");
var _messages = require("../messages");
function initialiseOperation(proceed, abort, context) {
    var wait = context.wait, node = context.node, debug = context.debug, release = context.release, bundler = context.bundler, quietly = context.quietly, metrics = context.metrics, entryFile = context.entryFile, processes = context.processes, transpiler = context.transpiler, bundleFile = context.bundleFile, libDirectory = context.libDirectory, tempDirectory = context.tempDirectory, sourceDirectory = context.sourceDirectory, processesLength = Number(processes); ///
    var entryFilePath = null, bundleFilePath = null, sourceDirectoryPath = null, targetDirectoryPath = null;
    if (debug && release) {
        console.log(_messages.DEBUG_AND_RELEAES_BOTH_SET_MESSAGE);
        abort();
        return;
    }
    if (sourceDirectory === null) {
        console.log(_messages.NO_SOURCE_DIRECTORY_SPECIFIED_MESSAGE);
        abort();
        return;
    }
    if (libDirectory === null && tempDirectory === null) {
        console.log(_messages.NEITHER_LIB_NOR_TEMP_DIRECTORY_SPECIFIED_MESSAGE);
        abort();
        return;
    }
    if (libDirectory !== null && tempDirectory !== null) {
        console.log(_messages.BOTH_LIB_AND_TEMP_DIRECTORIES_SPECIFIED_MESSAGE);
        abort();
        return;
    }
    if (tempDirectory !== null) {
        if (entryFile === null) {
            console.log(_messages.NO_ENTRY_FILE_SPECIFIED_MESSAGE);
            abort();
            return;
        }
        if (bundleFile === null) {
            console.log(_messages.NO_BUNDLE_FILE_SPECIFIED_MESSAGE);
            abort();
            return;
        }
    }
    if (entryFile !== null && bundleFile === null) {
        console.log(_messages.ENTRY_FILE_BUT_NO_BUNDLE_FILE_SPECIFIED_MESSAGE);
        abort();
        return;
    }
    if (bundleFile !== null && entryFile === null) {
        console.log(_messages.BUNDLE_FILE_BUT_NO_ENTRY_FILE_SPECIFIED_MESSAGE);
        abort();
        return;
    }
    if (entryFile !== null) {
        var entryFileOption = entryFile; ///
        entryFilePath = (0, _path.pathFromOption)(entryFileOption);
        if (entryFilePath === null) {
            console.log(_messages.ENTRY_FILE_PATH_NOT_RELATIVE_TO_CURRENT_DIRECTORY_MESSAGE);
            abort();
            return;
        }
    }
    if (bundleFile !== null) {
        var bundleFileOption = bundleFile; ///
        bundleFilePath = (0, _path.pathFromOption)(bundleFile, bundleFileOption);
        if (bundleFilePath === null) {
            console.log(_messages.BUNDLE_FILE_PATH_NOT_RELATIVE_TO_CURRENT_DIRECTORY_MESSAGE);
            abort();
            return;
        }
    }
    if (libDirectory !== null) {
        var libDirectoryOption = libDirectory, libDirectoryPath = (0, _path.pathFromOption)(libDirectory, libDirectoryOption);
        if (libDirectoryPath === null) {
            console.log(_messages.LIB_DIRECTORY_PATH_NOT_RELATIVE_TO_CURRENT_DIRECTORY_MESSAGE);
            abort();
            return;
        }
        targetDirectoryPath = libDirectoryPath; ///
    }
    if (tempDirectory !== null) {
        var tempDirectoryOption = tempDirectory, tempDirectoryPath = (0, _path.pathFromOption)(tempDirectory, tempDirectoryOption);
        if (tempDirectoryPath === null) {
            console.log(_messages.TEMP_DIRECTORY_PATH_NOT_RELATIVE_TO_CURRENT_DIRECTORY_MESSAGE);
            abort();
            return;
        }
        targetDirectoryPath = tempDirectoryPath; ///
    }
    if (sourceDirectory !== null) {
        var sourceDirectoryOption = sourceDirectory; ///
        sourceDirectoryPath = (0, _path.pathFromOption)(sourceDirectory, sourceDirectoryOption);
        if (sourceDirectoryPath === null) {
            console.log(_messages.SOURCE_DIRECTORY_PATH_NOT_RELATIVE_TO_CURRENT_DIRECTORY_MESSAGE);
            abort();
            return;
        }
    }
    Object.assign(context, {
        wait: wait,
        node: node,
        debug: debug,
        bundler: bundler,
        quietly: quietly,
        metrics: metrics,
        transpiler: transpiler,
        entryFilePath: entryFilePath,
        bundleFilePath: bundleFilePath,
        processesLength: processesLength,
        sourceDirectoryPath: sourceDirectoryPath,
        targetDirectoryPath: targetDirectoryPath
    });
    delete context.options;
    if (metrics) {
        (0, _metrics.initialiseMetrics)(context);
    }
    proceed();
}

//# sourceMappingURL=data:application/json;base64,