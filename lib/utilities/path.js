"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: Object.getOwnPropertyDescriptor(all, name).get
    });
}
_export(exports, {
    get combinePaths () {
        return combinePaths;
    },
    get isPathFullQualifiedPath () {
        return isPathFullQualifiedPath;
    },
    get pathFromFullyQualifiedPath () {
        return pathFromFullyQualifiedPath;
    },
    get pathFromOption () {
        return pathFromOption;
    },
    get pathWithoutBottommostNameFromPath () {
        return pathWithoutBottommostNameFromPath;
    },
    get pathWithoutDirectoryPathFromPathAndDirectoryPath () {
        return pathWithoutDirectoryPathFromPathAndDirectoryPath;
    },
    get sourceFileNameFromSourceFilePathAndTargetFilePath () {
        return sourceFileNameFromSourceFilePathAndTargetFilePath;
    },
    get sourceFilePathFromFilePathAndSourceDirectoryPath () {
        return sourceFilePathFromFilePathAndSourceDirectoryPath;
    },
    get sourcesFromSourcesSourceDirectoryPathAndTargetDirectoryPath () {
        return sourcesFromSourcesSourceDirectoryPathAndTargetDirectoryPath;
    },
    get targetFilePathFromFilePathAndTargetDirectoryPath () {
        return targetFilePathFromFilePathAndTargetDirectoryPath;
    }
});
var _path = /*#__PURE__*/ _interop_require_default(require("path"));
var _necessary = require("necessary");
var _constants = require("../constants");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var FORWARD_SLASH_CHARACTER = _necessary.characters.FORWARD_SLASH_CHARACTER;
var currentWorkingDirectoryPath = process.cwd(), currentWorkingDirectoryPathLength = currentWorkingDirectoryPath.length;
var combinePaths = _necessary.pathUtilities.combinePaths, pathWithoutBottommostNameFromPath = _necessary.pathUtilities.pathWithoutBottommostNameFromPath;
function pathFromOption(option) {
    var path = null;
    var optionAbsolutePath = /^\/.*/.test(option), optionAllowedRelativePath = /^\.\/.*/.test(option), optionForbiddenRelativePath = /^\.\.\/.*/.test(option);
    if (false) {
    ///
    } else if (optionAbsolutePath) {
    ///
    } else if (optionAllowedRelativePath) {
        path = option.replace(/^\.\//, _constants.EMPTY_STRING).replace(/\/$/, _constants.EMPTY_STRING);
    } else if (optionForbiddenRelativePath) {
        path = null;
    } else {
        path = option; ///
    }
    return path;
}
function isPathFullQualifiedPath(path) {
    var pathStartsWithCurrentWorkingDirectoryPath = path.startsWith(currentWorkingDirectoryPath), pathFullyQualifiedPath = pathStartsWithCurrentWorkingDirectoryPath; ///
    return pathFullyQualifiedPath;
}
function pathFromFullyQualifiedPath(fullyQualifiedPath) {
    var path = fullyQualifiedPath.substring(currentWorkingDirectoryPathLength);
    return path;
}
function pathWithoutDirectoryPathFromPathAndDirectoryPath(path, directoryPath) {
    var directoryPathLength = directoryPath.length, forwardSlashCharacterLength = FORWARD_SLASH_CHARACTER.length, pathWithoutDirectoryPath = path.substring(directoryPathLength + forwardSlashCharacterLength);
    return pathWithoutDirectoryPath;
}
function sourceFilePathFromFilePathAndSourceDirectoryPath(filePath, sourceDirectoryPath) {
    var sourceFilePath = combinePaths(sourceDirectoryPath, filePath);
    return sourceFilePath;
}
function targetFilePathFromFilePathAndTargetDirectoryPath(filePath, targetDirectoryPath) {
    var targetFilePath = combinePaths(targetDirectoryPath, filePath);
    return targetFilePath;
}
function sourceFileNameFromSourceFilePathAndTargetFilePath(sourceFilePath, targetFilePath) {
    var relativeSourceFilepath = relativeSourceFilePathFromSourceFilePathAndTargetFilePath(sourceFilePath, targetFilePath), sourceFileName = relativeSourceFilepath; ///
    return sourceFileName;
}
function sourcesFromSourcesSourceDirectoryPathAndTargetDirectoryPath(sources, sourceDirectoryPath, targetDirectoryPath) {
    sources = sources.map(function(source) {
        var sourceStartsWithTargetDirectoryPath = source.startsWith(targetDirectoryPath);
        if (sourceStartsWithTargetDirectoryPath) {
            var targetDirectoryPathLength = targetDirectoryPath.length, start = targetDirectoryPathLength + 1, filePath = source.substring(start), targetFilePath = source, sourceFilePath = sourceFilePathFromFilePathAndSourceDirectoryPath(filePath, sourceDirectoryPath), relativeSourceFilePath = relativeSourceFilePathFromSourceFilePathAndTargetFilePath(sourceFilePath, targetFilePath);
            source = relativeSourceFilePath; ///
        }
        return source;
    });
    return sources;
}
function relativeSourceFilePathFromSourceFilePathAndTargetFilePath(sourceFilePath, targetFilePath) {
    var targetFilePathWithoutBottommostName = pathWithoutBottommostNameFromPath(targetFilePath), relativeSourceFilePath = _path.default.relative(targetFilePathWithoutBottommostName, sourceFilePath);
    return relativeSourceFilePath;
}

//# sourceMappingURL=data:application/json;base64,